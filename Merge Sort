//it use divide and conquer algorithm
#include<iostream>
using namespace std;
void merge (int arr[],int l, int mid,int r){
    int n1=mid-l+1;
    int n2=r-mid;
    int a[n1];
    int b[n2]; //we are making two temporary array as we have to compare two values and then inputing the lower value
    for(int i=0;i<n1;i++){
        a[i]=arr[l+i];  //as our indexing start with leftmost value of original array
    }
    for(int i=0;i<n2;i++){
        b[i]=arr[mid+1+i];  //as our indexing start with mid+1 value of original array
    }
    int i=0;
    int j=0;
    int k=l;//our indexinging will start with leftmost value
    while(i<n1 && j<n2){
        if(a[i]<b[j]){
            arr[k]=a[i];
            k++;
            i++;
        }
        else{
            arr[k]=b[j];
            k++;
            j++;
        }
    }
    while(i<n1){
        arr[k]=a[i];
        k++;
        i++;
    }
    while(j<n2){
        arr[k]=b[j];
        k++;
        j++;
    }
}
void mergeSort(int arr[],int l,int r){
    if(r>l){
        int mid=(l+r)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        merge(arr,l,mid,r);
    }
}
int main(){
int n ;
cout<<"Enter size of array ";
cin>>n;
int arr[n];
cout<<"Enter values of array "<<endl;
for(int i=0;i<n;i++){
    cin>>arr[i];
}
mergeSort(arr,0,n);
for(int i=0;i<n;i++){
    cout<<arr[i]<<" ";
}
return 0;
}

//check time complexity by your own
